@page "/weather"
@using nq_blazor_test.Models
@using nq_blazor_test.Data

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (weatherData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table weather-table">
        <thead>
            <tr>
                <th>Location</th>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th>Summary</th>
                <th>Severity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var condition in weatherData)
            {
                var rowClass = condition.IsDangerous ? "dangerous-weather" : condition.IsHarsh ? "harsh-weather" : "";
                <tr class="@rowClass">
                    <td>@condition.Location</td>
                    <td>@condition.Date.ToShortDateString()</td>
                    <td>@GetWeatherEmoji(condition.Summary) @condition.TemperatureC</td>
                    <td class="@rowClass">@condition.Summary</td>
                    <td>@condition.SeverityEmoji @condition.SeverityLabel</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<WeatherCondition>? weatherData;
    private WeatherService weatherService = new WeatherService();

    protected override void OnInitialized()
    {
        // Load test data (scalable, edge cases included)
        weatherData = weatherService.GetWeatherData(50);
    }

    private string GetWeatherEmoji(WeatherType summary)
    {
        return summary switch
        {
            WeatherType.Freezing => "🥶",
            WeatherType.Bracing => "🧊",
            WeatherType.Sweltering => "🥵",
            WeatherType.Scorching => "🔥",
            WeatherType.Mild => "🌤️",
            WeatherType.Warm => "☀️",
            WeatherType.Cool => "🌬️",
            WeatherType.Hot => "🌡️",
            WeatherType.Cold => "❄️",
            _ => "🌡️"
        };
    }

    private string GetSeverityEmoji(int severity)
    {
        return severity switch
        {
            1 => "🟢", // No risk
            2 => "🟡", // Low risk
            3 => "🟠", // Moderate risk
            4 => "🔴", // High risk
            5 => "🚨", // Extreme risk
            _ => ""
        };
    }
}
